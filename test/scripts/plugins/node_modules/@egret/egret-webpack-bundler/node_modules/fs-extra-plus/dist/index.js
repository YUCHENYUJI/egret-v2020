"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.saferRemove = exports.glob = void 0;
__exportStar(require("fs-extra"), exports);
const fast_glob_1 = __importDefault(require("fast-glob"));
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const util_1 = require("./util");
/**
 * Simplified and sorted glob function (using fast-glob) for one or more pattern from current directory or a optional cwd one.
 *
 * Note 1: The result will be sorted by natural directory/subdir/filename order (as a would a recursive walk)
 * Note 2: When `cwd` in options, it is added to the file path i.e. `pathJoin(cwd, path)`
 *
 * @returns always sorted result return Promise<string[]>
*/
async function glob(pattern, cwdOrFastGlobOptions) {
    let opts = undefined;
    if (cwdOrFastGlobOptions != null) {
        opts = (typeof cwdOrFastGlobOptions === 'string') ? { cwd: cwdOrFastGlobOptions } : cwdOrFastGlobOptions;
    }
    const result = await fast_glob_1.default(pattern, opts);
    const cwd = (opts) ? opts.cwd : undefined;
    const list = result.map(path => {
        return (cwd) ? path_1.join(cwd, path) : path;
    });
    return list.sort(util_1.globCompare);
}
exports.glob = glob;
/** Remove one or more files. Resolved the number of names removed */
async function saferRemove(names, cwd) {
    const baseDir = (cwd) ? path_1.resolve(cwd) : path_1.resolve('./');
    let removedNames = [];
    for (const name of asArray(names)) {
        const fullPath = path_1.join(baseDir, name);
        if (!fullPath.startsWith(baseDir)) {
            throw new Error(`Path to be removed does not look safe (nothing done): ${fullPath}\n\tCause: Does not belong to ${baseDir}`);
        }
        const exists = await fs_extra_1.pathExists(fullPath);
        if (exists) {
            await fs_extra_1.remove(fullPath);
            removedNames.push(name);
        }
    }
    return removedNames;
}
exports.saferRemove = saferRemove;
//#region    ---------- Utils ---------- 
function asArray(names) {
    return (names instanceof Array) ? names : [names];
}
//#endregion ---------- /Utils ----------
