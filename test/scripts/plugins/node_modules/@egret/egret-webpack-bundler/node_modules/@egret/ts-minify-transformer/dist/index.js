"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.myTransformer = void 0;
var ts = __importStar(require("typescript"));
exports.myTransformer = function (program, options) {
    return function (context) {
        return function (sf) {
            function visitClassDeclaration(classNode) {
                function generateDeclarationMappings(classNode) {
                    var declarationMappings = [];
                    var renameCount = 1;
                    for (var _i = 0, _a = classNode.members; _i < _a.length; _i++) {
                        var child = _a[_i];
                        if (ts.isPropertyDeclaration(child) || ts.isMethodDeclaration(child)) {
                            if (child.modifiers && child.modifiers[0].kind === ts.SyntaxKind.PrivateKeyword) {
                                var name_1 = '';
                                switch (options.mode) {
                                    case 'release':
                                        name_1 = 'a' + renameCount;
                                        break;
                                    case 'debug':
                                        name_1 = '$$' + child.name.getText(sf) + '$$';
                                }
                                declarationMappings.push({
                                    declarationNode: child,
                                    newName: name_1
                                });
                                renameCount++;
                            }
                        }
                    }
                    return declarationMappings;
                }
                function generatePropertyAccessMappings(classNode) {
                    var propertyAccessMappings = [];
                    ts.visitEachChild(classNode, visitClassDeclarationChildren, context);
                    function visitClassDeclarationChildren(node) {
                        if (ts.isPropertyAccessExpression(node)) {
                            for (var _i = 0, mappings1_2 = mappings1; _i < mappings1_2.length; _i++) {
                                var declaration = mappings1_2[_i];
                                if (declaration.declarationNode.name.getText(sf) === node.name.getText(sf)) {
                                    var typeChecker = program.getTypeChecker();
                                    var origin_1 = typeChecker.getSymbolAtLocation(declaration.declarationNode.name);
                                    var target = typeChecker.getSymbolAtLocation(node.name);
                                    if (origin_1 === target) {
                                        propertyAccessMappings.push({ propertyAccessNode: node, newName: declaration.newName });
                                    }
                                }
                            }
                        }
                        return ts.visitEachChild(node, visitClassDeclarationChildren, context);
                    }
                    return propertyAccessMappings;
                }
                var mappings1 = generateDeclarationMappings(classNode);
                var mappings2 = generatePropertyAccessMappings(classNode);
                for (var _i = 0, mappings1_1 = mappings1; _i < mappings1_1.length; _i++) {
                    var mapping = mappings1_1[_i];
                    mapping.declarationNode.name = ts.createIdentifier(mapping.newName);
                }
                for (var _a = 0, mappings2_1 = mappings2; _a < mappings2_1.length; _a++) {
                    var mapping = mappings2_1[_a];
                    mapping.propertyAccessNode.name = ts.createIdentifier(mapping.newName);
                }
                return classNode;
            }
            function visitor(node) {
                if (ts.isClassDeclaration(node)) {
                    validateField(node);
                    return visitClassDeclaration(node);
                }
                return ts.visitEachChild(node, visitor, context);
            }
            ;
            function validateField(node) {
                var _a;
                for (var _i = 0, _b = node.members; _i < _b.length; _i++) {
                    var child = _b[_i];
                    if (ts.isPropertyDeclaration(child) || ts.isMethodDeclaration(child)) {
                        var replaceWord = child.name.escapedText.toString().replace(/^a\d*$/, '');
                        if (replaceWord !== child.name.escapedText.toString()) {
                            var message = "class " + ((_a = node.name) === null || _a === void 0 ? void 0 : _a.getText(sf)) + " \u4E2D\u5B58\u5728\u540D\u4E3Aa{number}\u7684\u53D8\u91CF\u540D\uFF0C\u8BF7\u91CD\u547D\u540D\u8BE5\u53D8\u91CF";
                            throw new Error(message);
                        }
                    }
                }
            }
            return ts.visitNode(sf, visitor);
        };
    };
};
